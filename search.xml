<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>序列化器</title>
      <link href="/2021/07083.html"/>
      <url>/2021/07083.html</url>
      
        <content type="html"><![CDATA[<h4 id="序列化器："><a href="#序列化器：" class="headerlink" title="序列化器："></a>序列化器：</h4><p>作用：<img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210416101325153.png" alt="image-20210416101325153"></p><h5 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h5><p>​    数据之间的相互转换，数据结构类型转换为其他格式（字典，JSON，XML等），将Django的模型类对象转换为JSON字符串</p><h5 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h5><p>​    反之，将其他格式转换为程序整的数据，例如将JSON字符串转换为Django中的模型类对象</p><h5 id="1-1定义："><a href="#1-1定义：" class="headerlink" title="1.1定义："></a>1.1定义：</h5><p>能够参考模型序列化器：</p><pre><code>&quot;&quot;&quot;定义序列化器１．定义类，继承自Serializer２．和模型类，字段，类型，选项一样    read_only=True　只读    label　字段说明&quot;&quot;&quot;</code></pre><p>代码(book/serializers.py)：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span></code></pre><p>代码(book/model.py)：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true">#定义图书模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">)</span><span class="token punctuation">:</span>    btitle <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'tb_books'</span> <span class="token comment" spellcheck="true">#　知名数据库名称</span>        verbose_name <span class="token operator">=</span> <span class="token string">'图书'</span> <span class="token comment" spellcheck="true">#ａｄｍｉｎ站点中显示的名称</span>        verbose_name_plural <span class="token operator">=</span> verbose_name <span class="token comment" spellcheck="true">#显示的复数名称</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''定义每个数据对象的显示信息'''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>btitle</code></pre><h5 id="1-2序列化器，序列化单个对象"><a href="#1-2序列化器，序列化单个对象" class="headerlink" title="1.2序列化器，序列化单个对象"></a>1.2序列化器，序列化单个对象</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========1.序列化器，序列化单个书籍对象==========='''</span><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true">#1.获取书籍对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：&amp;#123;'id': 1, 'btitle': '西游记', 'bpub_date': '2021-04-21', 'bread': 30, 'bcomment': 39, 'is_delete': False&amp;#125;'''</span></code></pre><p>注意点：<br>    BookInfoSerializer(instance=book)</p><p>​        instance=book：表示将book序列化</p><p>​    serializer.data：获取序列化的结果</p><h5 id="序列化器，序列化列表"><a href="#序列化器，序列化列表" class="headerlink" title="序列化器，序列化列表"></a>序列化器，序列化列表</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.获取书籍对象</span>books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象,many=True　表示序列化多个对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：[OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)]), OrderedDict([('id', 2), ('btitle', '水浒传'), ('bpub_date', '2021-04-08'), ('bread', 40), ('bcomment', 30), ('is_delete', False)])]'''</span></code></pre><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>​    BookInfoSerializer(instance=book,many=True)</p><p>​        many=True：表示序列化多个对象</p><h5 id="英雄序列化器"><a href="#英雄序列化器" class="headerlink" title="英雄序列化器"></a>英雄序列化器</h5><p>​    操作流程(book/serializers.py):</p><p>定义英雄序列化器：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""英雄数据序列化器"""</span>    GENDER_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'ID'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hname <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'名字'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    hgender <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>choices<span class="token operator">=</span>GENDER_CHOICES<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'性别'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    hcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'描述信息'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>定义关联字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#1,添加外键,主键表示 必须提供`queryset` 选项, 或者设置 read_only=`True`.显示外键</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(queryset=BookInfo.objects.all())</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：&amp;#123;'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': 1&amp;#125;</span>    <span class="token comment" spellcheck="true">#2,添加外键, 来自于关联模型类, __str__的返回值　外键名称</span>    <span class="token comment" spellcheck="true"># hbook = serializers.StringRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：&amp;#123;'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': '西游记'&amp;#125;</span>    <span class="token comment" spellcheck="true">#3,添加外键,关联另外一个序列化器　返回外键关联的所有信息</span>    hbook <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 结果：&amp;#123;'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)])&amp;#125;</span></code></pre><h5 id="书籍序列化器，关联many"><a href="#书籍序列化器，关联many" class="headerlink" title="书籍序列化器，关联many"></a>书籍序列化器，关联many</h5><p>​    目的：能够序列化书籍的时候，输出关联作者信息</p><p>​    操作流程（book/serializers.py）：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#1.用书籍查作者：关联英雄主键，many=True,一方中，序列化多方需要加上　(获取ｉｄ)</span>    <span class="token comment" spellcheck="true"># heroinfo_set = serializers.PrimaryKeyRelatedField(read_only=True,many=True)</span>    <span class="token comment" spellcheck="true">#２．关联英雄,__str__返回值（获取ｎａｍｅ）</span>    heroinfo_set <span class="token operator">=</span> serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>​    注意：</p><p>​            many=True,一方中，序列化多方需要加上</p><p>==============================================</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>1.1数据类型验证</p><ul><li><p>目的：理解序列化器中的字段，对数据进行校验的过程</p></li><li><p>常见的字段类型：</p><ol><li><p>CharField：字段串</p></li><li><p>······</p></li></ol></li></ul><p>1.2反序列化选项验证</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419093003168.png" alt="image-20210419093003168"></p><p>判断max_length等等</p><ul><li>requred：默认是True，必须要传递，除非设置了 default | false | read_only</li><li>read_only： 只读，不进行反序列化</li></ul><p>1.3反序列化单个字段验证 ：</p><p>​    目的：定义单个字段校验</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true"># 反序列化单个字段校验 validate多字段校验，加上字段名是单个字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate_btitle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 校验ｖａｌｕｅ的内容</span>         <span class="token keyword">if</span> <span class="token string">'金瓶'</span> <span class="token operator">not</span> <span class="token keyword">in</span> value<span class="token punctuation">:</span>             <span class="token keyword">raise</span>  serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'书籍不包含金瓶'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> value</code></pre><ul><li>注意点：<ul><li>固定格式：<br>def validate_字段名称(self, value):<ul><li>pass</li></ul></li></ul></li></ul><p>1.4 反序列化，多个字段validate验证</p><ul><li><p>目的：</p></li><li><p>代码展示：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#多字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param attrs: 外界传过来的，book_dict        :return:         """</span>        <span class="token comment" spellcheck="true">#1．获取阅读量，评论量</span>        bread <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        bcomment <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#2.判断</span>        <span class="token keyword">if</span> bcomment <span class="token operator">></span> bread<span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'评论量大于阅读量'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回：</span>        <span class="token keyword">return</span> attrs</code></pre></li><li><p>注意：</p><ul><li>校验不通过的时候一定要抛出异常</li></ul></li></ul><p>1.5反序列化，自定义验证方法</p><p>1.6 反序列化，create保存数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"金瓶x-插画版"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># serializer.is_valid()</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．输出</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#实现create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param validated_data: 校验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true">#1.创建ｂｏｏｋ对象，入库</span>        book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#2.返回</span>        <span class="token keyword">return</span> book</code></pre></li></ul></li><li><p>注意点：</p><ul><li>当使用序列化器调用sava方法的时候，执行的就是序列化器中的create方法</li></ul></li></ul><p>1.7 反序列化，update更新数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========３.序列化器，反序列化,update更新数据==========='''</span><span class="token string">''</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"水浒传"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#要更新的数据</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">,</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．入库</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码:</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">#实现update方法：</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param instance: 外界传过来的值        :param validated_data:　验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true"># １.更新数据</span>        instance<span class="token punctuation">.</span>btitle <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'btitle'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bpub_date <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bpub_date'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bread <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bcomment <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 2.入库</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance</code></pre></li></ul></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><em><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419163100154.png" alt="image-20210419163100154"></em>*</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm git多人协作开发</title>
      <link href="/2021/07082.html"/>
      <url>/2021/07082.html</url>
      
        <content type="html"><![CDATA[<p>第一步：</p><p>复制合作者项目名</p><p><img src="http://pic.ihcnb.cn/iHcnb/5bb0aafb244f4.png" alt="clipboard.png"></p><p>在你这边搜索</p><p><img src="http://pic.ihcnb.cn/iHcnb/8db34b37a1084.png" alt="clipboard.png"></p><p>打开pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/fd0c2dadcd904.png" alt="clipboard.png"></p><p>复制地址输入地址</p><p><img src="http://pic.ihcnb.cn/iHcnb/2de97e3e54a25.png" alt="clipboard.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/fb45ebea98971.png" alt="clipboard.png"></p><p>此时多人协作已完成文件克隆</p><p>次分支有所改动上传后需要在分支页面确认</p><p><img src="http://pic.ihcnb.cn/iHcnb/a01cbc2626ad6.png" alt="clipboard.png"></p><p>确认后主分支也需要确认，确认后方可修改主分支</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截登录</title>
      <link href="/2021/070249806.html"/>
      <url>/2021/070249806.html</url>
      
        <content type="html"><![CDATA[<p><strong>第一步，自定义中间件：</strong></p><p>   在app下新建文件夹middleware –&gt; 在新建 .py文件         然后导入中间件</p><img src="/2021/070249806/clipboard.png" class><p><strong>第二步，在settings 中配置白名单：</strong></p><pre class=" language-python"><code class="language-python">WHITE_REGEX_URL_LIST<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'/login/'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">#允许可以在不登陆情况下访问的路径</span><span class="token punctuation">]</span></code></pre><p><strong>第三步在 .py文件中</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断用户是否登陆中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> kan<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">class</span> <span class="token class-name">AuthMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        user_object <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''        1.获取用户当前访问的URL        2.检查URL是否在白名单中,如果在,继续访问,如果在则判断是否登录        '''</span>        <span class="token comment" spellcheck="true"># 白名单:项目不登录就可以访问的页面URL</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path_info <span class="token keyword">in</span> settings<span class="token punctuation">.</span>WHITE_REGEX_URL_LIST<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># request.path_info获取当前访问URL</span>            <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 中间件 默认return 空</span>        <span class="token comment" spellcheck="true"># 检查用户是否登录,已登录往前走,未登录返回登录页面</span>        <span class="token keyword">if</span> <span class="token operator">not</span> user_object<span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除</title>
      <link href="/2021/0702156505.html"/>
      <url>/2021/0702156505.html</url>
      
        <content type="html"><![CDATA[<p><strong>第一步：配置子路由</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">'bathdet/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>bathdet<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'bathdet'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p><strong>第二步：HTML页面：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一定要传值value 否则拿不到值</span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"bat"</span> value<span class="token operator">=</span><span class="token string">"&amp;#123;&amp;#123; b.id &amp;#125;&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>  <span class="token comment" spellcheck="true">//发送ajax请求</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               #定义一个空列表    bat <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'bat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      #获取所有选择框    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>bat<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         #判断如果选择了那个                list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        #就把哪个的值 添加到空列表list            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">:</span><span class="token string">"&amp;#123;% url 'bathdet' %&amp;#125;"</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">'list'</span><span class="token punctuation">:</span>list                 #传值            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            traditional<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>           #传多个参数时使用            success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//按钮绑定 onclick 事件</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&amp;#123;% url 'bathdet' %&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"a()"</span><span class="token operator">></span>批量删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>第三步 ： 视图</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name=all]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//all 是全选按钮的name属性值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tbody :checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把要被全选的checkbox放入一个tbody里</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tbody :checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+django跨域</title>
      <link href="/2021/07012.html"/>
      <url>/2021/07012.html</url>
      
        <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>由于开发模式为前后端分离式开发，故而通常情况下，前端和后端可能运行不同的ip或者port下，导致出现跨域问题</p><h6 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h6><p>​    如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是<br>​    指”协议 +域名+端口”三者相同，即便两个不同的域名指向同一个ip地<br>​    址，也非同源</p><h6 id="同源策略限制以下几种行为："><a href="#同源策略限制以下几种行为：" class="headerlink" title="同源策略限制以下几种行为："></a>同源策略限制以下几种行为：</h6><p>1 . Cookie、LocalStorage 和 IndexDB 无法读取<br>2 . DOM 和 Js对象无法获得<br>3 . AJAX 请求不能发送</p><h3 id="前端解决跨域"><a href="#前端解决跨域" class="headerlink" title="前端解决跨域"></a>前端解决跨域</h3><h4 id="既然跨域是因为不同源，那我同源不就完事儿了，但是后端请求地址不可能改"><a href="#既然跨域是因为不同源，那我同源不就完事儿了，但是后端请求地址不可能改" class="headerlink" title="既然跨域是因为不同源，那我同源不就完事儿了，但是后端请求地址不可能改"></a>既然跨域是因为不同源，那我同源不就完事儿了，但是后端请求地址不可能改</h4><h4 id="变，所以可以在前端和后端的中间加一层代理，前端通过代理访问后端。"><a href="#变，所以可以在前端和后端的中间加一层代理，前端通过代理访问后端。" class="headerlink" title="变，所以可以在前端和后端的中间加一层代理，前端通过代理访问后端。"></a>变，所以可以在前端和后端的中间加一层代理，前端通过代理访问后端。</h4><p>在Vue-cli工具中已经提供了代理的功能，只需要配置即可。</p><pre class=" language-python"><code class="language-python">在根目录下的config<span class="token operator">/</span>index<span class="token punctuation">.</span>js文件中有如下配置项：proxyTable<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8000/'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> true<span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><ul><li>‘/‘表示以’/‘(即所有的路径)开头的路径均需要代理</li><li>target：代理的目标服务器地址（即后端服务器地址）为<br>‘<a href="http://127.0.0.1:8000/&#39;">http://127.0.0.1:8000/&#39;</a></li><li>changeOrigin：为修改源：修改请求中的源地址    </li><li>pathReWrite：URL路径重写，对于以’/api’开头的路径将’/api’替换<br>为’’</li></ul><h2 id="后端解决跨域"><a href="#后端解决跨域" class="headerlink" title="后端解决跨域"></a>后端解决跨域</h2><p>安装django-cors-headers</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'corsheaders'</span>，    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span>   MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'corsheaders.middleware.CorsMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 注意顺序</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#跨域增加忽略</span>CORS_ALLOW_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>CORS_ALLOW_METHODS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>CORS_ALLOW_HEADERS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'X_FILENAME'</span><span class="token punctuation">,</span>    <span class="token string">'accept-encoding'</span><span class="token punctuation">,</span>    <span class="token string">'authorization'</span><span class="token punctuation">,</span>    <span class="token string">'content-type'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">,</span>    <span class="token string">'origin'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">,</span>    <span class="token string">'x-csrftoken'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">,</span>    <span class="token string">'Pragma'</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/0701163.html"/>
      <url>/2021/0701163.html</url>
      
        <content type="html"><![CDATA[<p>title: 视图集额外动作<br>tags:</p><ul><li>Python</li><li>DRF<br>categories: 后端<br>abbrlink: 54766<br>date: 2021-06-29 00:00:00</li></ul><h3 id="视图集额外动作："><a href="#视图集额外动作：" class="headerlink" title="视图集额外动作："></a>视图集额外动作：</h3><h6 id="目的：给视图集添加额外的动作（方法）"><a href="#目的：给视图集添加额外的动作（方法）" class="headerlink" title="目的：给视图集添加额外的动作（方法）"></a>目的：给视图集添加额外的动作（方法）</h6><h4 id="1，子路由："><a href="#1，子路由：" class="headerlink" title="1，子路由："></a>1，子路由：</h4><pre class=" language-python"><code class="language-python">urlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'books/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'get':'list','post':'create'&amp;#125;)),</span>    path<span class="token punctuation">(</span><span class="token string">'books/&lt;int:pk>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'get': 'retrieve','put':'update','delete':'destroy'&amp;#125;)),</span>    path<span class="token punctuation">(</span><span class="token string">'books/bread/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'get': 'bread_book'&amp;#125;))</span><span class="token punctuation">]</span></code></pre><h4 id="2，类视图："><a href="#2，类视图：" class="headerlink" title="2，类视图："></a>2，类视图：</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#视图集</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet<span class="token keyword">from</span> booktest<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">from</span> booktest<span class="token punctuation">.</span>serializer <span class="token keyword">import</span> BookInfoModelSerializer<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#公共属性</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token comment" spellcheck="true">#1获取阅读量大于20的书籍</span>    <span class="token keyword">def</span> <span class="token function">bread_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取书籍</span>        books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>bread__gt<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#创建序列化器对象</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="视图集额外动作-partial："><a href="#视图集额外动作-partial：" class="headerlink" title="视图集额外动作  partial："></a><strong>视图集额外动作  partial：</strong></h3><h6 id="目的：给视图集添加额外的动作参数，并且更新局部信息"><a href="#目的：给视图集添加额外的动作参数，并且更新局部信息" class="headerlink" title="目的：给视图集添加额外的动作参数，并且更新局部信息"></a>目的：给视图集添加额外的动作参数，并且更新局部信息</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1，子路由：</span>path<span class="token punctuation">(</span><span class="token string">'books/bread/&lt;int:pk>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'put': 'update_book'&amp;#125;))</span><span class="token comment" spellcheck="true">#2，类视图：</span><span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#公共属性</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#2，修改书籍编号为1，阅读量为99</span>    <span class="token keyword">def</span> <span class="token function">update_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取参数</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        <span class="token comment" spellcheck="true">#创建序列化器</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance <span class="token operator">=</span> book<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>partial<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#检验入库</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回响应</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span>status<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span></code></pre><h3 id="路由router"><a href="#路由router" class="headerlink" title="路由router:"></a>路由router:</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#目的：可以通过  DefaultRouter  和  SimpleRouter  两个类来自动生成路由</span>DefaultRouter  共有三对路由：<span class="token comment" spellcheck="true">#列表路由</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-list'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>URLPattern <span class="token string">'^books\.(?P&lt;format>[a-z0-9]+)/?$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-list'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#详情路由</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/(?P&lt;pk>[^/.]+)/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-detail'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/(?P&lt;pk>[^/.]+)\.(?P&lt;format>[a-z0-9]+)/?$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-detail'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#根路由</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'api-root'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^\.(?P&lt;format>[a-z0-9]+)/?$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'api-root'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span>DefaultRouter<span class="token comment" spellcheck="true">#创建路由对象</span>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注册视图集</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'books'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">,</span>basename<span class="token operator">=</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls<span class="token comment" spellcheck="true">#输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlpatterns<span class="token punctuation">)</span></code></pre><h4 id="SimpleRouter-格式："><a href="#SimpleRouter-格式：" class="headerlink" title="SimpleRouter 格式："></a>SimpleRouter 格式：</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token comment" spellcheck="true">#列表路由</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-list'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#视图路由</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/(?P&lt;pk>[^/.]+)/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-detail'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span> 使用DRF 可以自动根据前端需要的类型，返回对应格式数据<span class="token operator">*</span> 请求的时候 在请求头中标记 Accept 即可<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span>DefaultRouter<span class="token comment" spellcheck="true">#创建路由对象</span>router <span class="token operator">=</span> SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注册视图集</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'books'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoModelViewSet<span class="token punctuation">,</span>basename<span class="token operator">=</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls<span class="token comment" spellcheck="true">#输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlpatterns<span class="token punctuation">)</span></code></pre><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h2 id="装饰-action"><a href="#装饰-action" class="headerlink" title="装饰 action:"></a>装饰 action:</h2><h6 id="可以通过-action-装饰方法，自动生成路由"><a href="#可以通过-action-装饰方法，自动生成路由" class="headerlink" title="可以通过 action 装饰方法，自动生成路由"></a>可以通过 action 装饰方法，自动生成路由</h6><h4 id="类视图："><a href="#类视图：" class="headerlink" title="类视图："></a>类视图：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#公共属性</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#1获取阅读量大于20的书籍</span>    @action<span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#生成路由规则 ： 前缀/方法名/</span>    <span class="token keyword">def</span> <span class="token function">bread_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#2，修改书籍编号为1，阅读量为99</span>    @action<span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'PUT'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#生成路由规则：前缀/&amp;#123;pk&amp;#125;/方法名/</span>    <span class="token keyword">def</span> <span class="token function">update_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="生成的路由："><a href="#生成的路由：" class="headerlink" title="生成的路由："></a>生成的路由：</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-list'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/bread_book/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-bread-book'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>URLPattern <span class="token string">'^books/(?P&lt;pk>[^/.]+)/$'</span> <span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'hhh-detail'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">]</span></code></pre><h2 id="认证-Authentication-："><a href="#认证-Authentication-：" class="headerlink" title="认证 Authentication ："></a>认证 Authentication ：</h2><h4 id="全局配置：-settiongs-py"><a href="#全局配置：-settiongs-py" class="headerlink" title="全局配置：(settiongs.py)"></a>全局配置：(settiongs.py)</h4><pre class=" language-python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'DEFAULT-AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'rest_framework.authentication.BasicAuthentication'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.authentication.SessionAuthentication'</span>    <span class="token comment" spellcheck="true">#自己服务器认证用户</span>    <span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="局部配置：-views-py"><a href="#局部配置：-views-py" class="headerlink" title="局部配置：(views.py)"></a>局部配置：(views.py)</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication<span class="token punctuation">,</span>BasicAuthentication<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#局部认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>SessionAuthentication<span class="token punctuation">,</span>BasicAuthentication<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#如果配置了全局和局部，默认是局部</span></code></pre><h2 id="权限-Permissions"><a href="#权限-Permissions" class="headerlink" title="权限 Permissions :"></a>权限 Permissions :</h2><pre class=" language-python"><code class="language-python">      <span class="token comment" spellcheck="true">#全局权限：</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true">#全局认证</span>    <span class="token string">'DEFAULT-AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'rest_framework.authentication.BasicAuthentication'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.authentication.SessionAuthentication'</span>    <span class="token comment" spellcheck="true">#自己服务器认证用户</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#全局权限</span>    <span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.IsAuthenticated',   #普通用户</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.AllowAny',       #所有用户</span>        <span class="token string">'rest_framework.permissions.IsAdminUser'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#管理员用户</span>    <span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#局部权限：</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#2，局部权限</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>AllowAny<span class="token punctuation">]</span></code></pre><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><h2 id="限流-Throttling"><a href="#限流-Throttling" class="headerlink" title="限流 Throttling:"></a>限流 Throttling:</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#局部限流：views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> AnonRateThrottle<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#局部限流</span>    throttle_classes <span class="token operator">=</span> <span class="token punctuation">[</span>AnonRateThrottle<span class="token punctuation">]</span>     全局限流：settiongs<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true">#全局限流</span><span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">#匿名用户</span>    <span class="token string">'rest_framework.throttling.UserRateThrottle'</span>    <span class="token comment" spellcheck="true">#认证用户</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'2/day'</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'3/day'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="分页-Pagination："><a href="#分页-Pagination：" class="headerlink" title="分页 Pagination："></a>分页 Pagination：</h2><h3 id="局部分页：views-py"><a href="#局部分页：views-py" class="headerlink" title="局部分页：views.py"></a>局部分页：views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>pagination <span class="token keyword">import</span> LimitOffsetPagination<span class="token punctuation">,</span>PageNumberPagination<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#局部分页</span>    pagination_class <span class="token operator">=</span> LimitOffsetPagination</code></pre><h3 id="全局分页settiongs-py"><a href="#全局分页settiongs-py" class="headerlink" title="全局分页settiongs.py"></a>全局分页settiongs.py</h3><pre class=" language-python"><code class="language-python"><span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.LimitOffsetPagination'</span><span class="token punctuation">,</span><span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><h3 id="过滤-Filtering"><a href="#过滤-Filtering" class="headerlink" title="过滤 Filtering:"></a>过滤 Filtering:</h3><h4 id="1，安装扩展-django-filters"><a href="#1，安装扩展-django-filters" class="headerlink" title="1，安装扩展 django-filters"></a>1，安装扩展 django-filters</h4><h4 id="2，注册子应用"><a href="#2，注册子应用" class="headerlink" title="2，注册子应用"></a>2，注册子应用</h4><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><h4 id="3，全局配置："><a href="#3，全局配置：" class="headerlink" title="3，全局配置："></a>3，全局配置：</h4><pre class=" language-python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'DEFAULT_FILTER_BACKENDS'</span><span class="token punctuation">:</span>     <span class="token punctuation">[</span><span class="token string">'django_filters.rest_framework.DjangoFilterBackend'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="局部配置："><a href="#局部配置：" class="headerlink" title="局部配置："></a>局部配置：</h4><pre class=" language-python"><code class="language-python">filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span></code></pre><h2 id="排序-OrderingFilter"><a href="#排序-OrderingFilter" class="headerlink" title="排序 OrderingFilter"></a>排序 OrderingFilter</h2><h4 id="使用指定的字段进行排序"><a href="#使用指定的字段进行排序" class="headerlink" title="使用指定的字段进行排序"></a>使用指定的字段进行排序</h4><h4 id="类视图：-1"><a href="#类视图：-1" class="headerlink" title="类视图："></a>类视图：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> filters<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">]</span>    ordering_fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'btitle'</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模糊查询</title>
      <link href="/2021/062915650.html"/>
      <url>/2021/062915650.html</url>
      
        <content type="html"><![CDATA[<h2 id="如果使用序列化的方法，先要创建序列化器"><a href="#如果使用序列化的方法，先要创建序列化器" class="headerlink" title="如果使用序列化的方法，先要创建序列化器"></a>如果使用序列化的方法，先要创建序列化器</h2><ul><li><p>第一步：配置子路由：</p><pre class=" language-python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'tiao/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>tiao<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'tiao'</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>第二步：HTML页面：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tiaojian()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  </code></pre></li><li><p>写一个按钮触发函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tiaojian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#cha'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      url<span class="token punctuation">:</span> <span class="token string">"&amp;#123;% url 'tiao' %&amp;#125;"</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>           #<span class="token keyword">get</span>请求或者post请求都可以      data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">'cha'</span><span class="token punctuation">:</span> a           #把获取到的值定义为‘cha’ 传到后端   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> date<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;tr>&lt;td>'</span> <span class="token operator">+</span> <span class="token string">'&lt;input type="checkbox" name="bat" value="&amp;#123;&amp;#123; b.id &amp;#125;&amp;#125;">'</span> <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bname <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stock <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>money <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>author_id <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span>                  <span class="token string">'&lt;td>'</span> <span class="token operator">+</span> date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>comment <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;/tr>'</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>          error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>第三步：Views.py   有两种写法，一中序列化器的写法，一个原生的写法</p><h3 id="序列化器的写法"><a href="#序列化器的写法" class="headerlink" title="序列化器的写法"></a>序列化器的写法</h3><p>```python<br>from rest_framework.views import APIView<br>from shop.serializer import BookModelSerializer</p></li></ul><p>class tiao(APIView):<br>    def get(self,request):<br>        cha = request.GET.get(‘cha’)<br>        v = Books.objects.filter(bname__contains=cha).all()   #模糊查询到bname字段中有前端获取关键词的所有值<br>        serializr = BookModelSerializer(instance=v, many=True)<br>        date = serializr.data<br>        return JsonResponse(date,safe=False)</p><pre><code>### 原生的写法   ```         python   cha = request.POST.get(&#39;cha&#39;)   v = Books.objects.filter(bname__contains=cha).all()   data = []   for i in v:       data_dict = &#123;           &#39;bname&#39;:i.bname,           &#39;stock&#39;:i.stock,           &#39;money&#39;:i.money,           &#39;author_id&#39;:i.author_id_id,           &#39;comment&#39;:i.comment,       &#125;       data.append(data_dict)       return JsonResponse(data,safe=False)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
